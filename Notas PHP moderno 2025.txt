NOTAS PHP MODERNO 2025
PROJECTO LOJAVIRTUAL


.HTACCESS na raiz da diretorio lojavirtual

RewriteEngine on

RewriteCond %{REQUEST_URI} !^/public/

RewriteRule ^(.*)$ public/$1 [L]


AQUI ESTÁ O FICHEIRO .HTACCESS COM UMA EXPLICAÇÃO DETALHADA:

---

RewriteEngine on
RewriteCond %{REQUEST_URI} !^/public/
RewriteRule ^(.*)$ public/$1 [L]

### EXPLICAÇÃO:
1. **`RewriteEngine on`**  
   - Ativa o mecanismo de reescrita de URLs do Apache.

2. **`RewriteCond %{REQUEST_URI} !^/public/`**  
   - **Condição**: Aplica a regra seguinte **apenas se** a URI solicitada **não começar** com `/public/` (o `!` nega a condição).  
   - Exemplo: Se a URL for `http://site.com/admin`, a condição é atendida (rewrite acontece). Se for `http://site.com/public/admin`, a condição **ignora** a regra.

3. **`RewriteRule ^(.*)$ public/$1 [L]`**  
   - **Regra**: Redireciona **todas as URLs** (`^(.*)$`) para a pasta `/public/`, mantendo o caminho original (`$1`).  
   - O flag `[L]` (Last) indica que esta é a última regra a ser executada se for aplicada.

---

### Exemplo Prático:
- **Requisição:** `http://meusite.com/css/estilo.css`  
  → **Internamente** vira: `http://meusite.com/public/css/estilo.css`  
- **Requisição:** `http://meusite.com/public/imagem.jpg`  
  → **Nada muda** (já está no diretório `/public/`).

---

### Uso Comum:
- Usado em frameworks PHP (como Laravel) para direcionar tráfego para a pasta `public/` (onde ficam `index.php` e arquivos públicos), protegendo pastas internas (`app/`, `database/`).

---

### Adaptações Úteis:
1. **Redirecionamento visível (301):**  
   ```apache
   RewriteRule ^(.*)$ public/$1 [L,R=301]
   ```
   - O navegador mostrará a URL redirecionada.

2. **Excluir outras pastas:**  
   ```apache
   RewriteCond %{REQUEST_URI} !^/(public|uploads|assets)/
   ```
   - Ignora `/public/`, `/uploads/` e `/assets/`.

---
________________________________________________________

.HTACCESS na pasta public

RewriteEngine on

RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php [L]

Aqui está a explicação detalhada do seu código `.htaccess` :

### Explicação:
1. **`RewriteEngine on`**  
   - Ativa o módulo de reescrita de URLs do Apache.

2. **`RewriteCond %{SCRIPT_FILENAME} !-f`**  
   - **Condição 1:** Verifica se o arquivo solicitado **não existe** (!-f = "not a file") no servidor.

3. **`RewriteCond %{SCRIPT_FILENAME} !-d`**  
   - **Condição 2:** Verifica se o diretório solicitado **não existe** (!-d = "not a directory") no servidor.

4. **`RewriteRule ^(.*)$ index.php [L]`**  
   - **Regra:** Se as duas condições acima forem atendidas (ou seja, a requisição não é para um arquivo ou diretório real), redireciona TODAS as URLs para `index.php`.  
   - O `[L]` indica que esta é a última regra a ser processada.

---

### Como Funciona na Prática:
- Se você acessar:  
  ✅ `http://site.com/rota/inexistente` → Vai para `index.php` (pois não é arquivo nem diretório real)  
  ✅ `http://site.com/login` → Vai para `index.php`  
  ❌ `http://site.com/imagem.jpg` → **Mostra a imagem** (se existir no servidor)  
  ❌ `http://site.com/css/` → **Mostra o diretório** (se existir)

---

### Uso Típico:
- **Front Controller Pattern**: Muito usado em frameworks PHP (Laravel, Symfony) para rotear todas as requisições através de um único arquivo (`index.php`), que então decide como processar a URL.

- **SPA (Single Page Applications)**: Útil para aplicações JavaScript (React, Vue) onde o servidor só precisa servir `index.html` para todas rotas.

---

### Adaptações Comuns:
1. **Adicionar parâmetro de rota (para PHP):**
   ```apache
   RewriteRule ^(.*)$ index.php?url=$1 [L,QSA]
   ```
   - O `QSA` (Query String Append) mantém parâmetros GET existentes.

2. **Ignorar arquivos específicos (ex: `.well-known`):**
   ```apache
   RewriteCond %{REQUEST_URI} !^/\.well-known/
   ```

--------------------------------------------------------------------------------------------------------------------
lojavirtual\.env

.env

DB_HOST=localhost
DB_NAME=lojavirtual
DB_USER=root
DB_PASS=

Versão Melhorada
env
# Configurações de Banco de Dados (MySQL/MariaDB)
DB_CONNECTION=mysql
DB_HOST=127.0.0.1  # Mais confiável que 'localhost' em alguns sistemas
DB_PORT=3306       # Porta explícita
DB_DATABASE=lojavirtual
DB_USERNAME=app_user  # Usuário dedicado (não root)
DB_PASSWORD=SenhaF0rt3!2024  # Senha complexa
DB_CHARSET=utf8mb4    # Suporte a emojis e caracteres especiais
DB_COLLATION=utf8mb4_unicode_ci
DB_SSL=false          # Habilitar em produção
Melhores Práticas Recomendadas
Crie um usuário dedicado com permissões mínimas necessárias:

sql
CREATE USER 'app_user'@'localhost' IDENTIFIED BY 'SenhaF0rt3!2024';
GRANT SELECT, INSERT, UPDATE, DELETE ON lojavirtual.* TO 'app_user'@'localhost';
FLUSH PRIVILEGES;
Armazene o arquivo .env fora do diretório público:

text
/projeto/
├── .env          # Arquivo de configuração
├── public/       # Diretório acessível na web
└── app/
Adicione ao .gitignore:

text
# .gitignore
.env
Exemplo de conexão PDO segura:

php
try {
    $pdo = new PDO(
        "mysql:host={$_ENV['DB_HOST']};dbname={$_ENV['DB_DATABASE']};charset={$_ENV['DB_CHARSET']}",
        $_ENV['DB_USERNAME'],
        $_ENV['DB_PASSWORD'],
        [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
        ]
    );
} catch (PDOException $e) {
    die("Erro de conexão: " . $e->getMessage());
}
Para Ambientes de Produção
Use variáveis de ambiente reais no servidor (não apenas arquivo .env)

Configure backups automáticos do banco de dados

Considere um connection pool para melhor performance

_____________________________________________________________________________________________________________________

lojavirtual\composer.json

{
    "autoload": {
        "psr-4": {"app\\": "app/"}
    }
}

Melhorias para o arquivo composer.json
O trecho mostrado configura o autoload PSR-4 para sua aplicação PHP. Vamos sugerir melhorias:

Configuração Atual
json
{
    "autoload": {
        "psr-4": {"app\\": "app/"}
    }
}
Funcionalidade Básica
Mapeia o namespace app\ para o diretório app/

Compatível com PSR-4 (PHP Standards Recommendation 4)

Permite carregamento automático de classes

Melhorias Recomendadas
1. Adicionar configurações essenciais
json
{
    "name": "seu-projeto/nome-do-projeto",
    "description": "Descrição do projeto",
    "type": "project",
    "require": {
        "php": "^8.1"
    },
    "autoload": {
        "psr-4": {
            "app\\": "app/",
            "App\\": "src/"  // Padrão mais comum para código principal
        }
    },
    "autoload-dev": {
        "psr-4": {
            "tests\\": "tests/"
        }
    }
}
2. Otimizações importantes
Namespace mais profissional:

Considere usar App\ (maiúsculo) em vez de app\ (mais comum em projetos modernos)

Estrutura de diretórios:

json
"psr-4": {
    "App\\": "src/",
    "App\\Core\\": "app/Core/",
    "App\\Controllers\\": "app/Controllers/"
}
Autoload para desenvolvimento:

json
"autoload-dev": {
    "psr-4": {
        "Tests\\": "tests/"
    }
}
3. Exemplo Completo Aprimorado
json
{
    "name": "vendor/loja-virtual",
    "description": "Sistema de Loja Virtual",
    "type": "project",
    "license": "proprietary",
    "require": {
        "php": "^8.2",
        "ext-pdo": "*"
    },
    "require-dev": {
        "phpunit/phpunit": "^10.0"
    },
    "autoload": {
        "psr-4": {
            "App\\": "src/",
            "App\\Core\\": "app/Core/",
            "App\\Controllers\\": "app/Controllers/",
            "App\\Models\\": "app/Models/"
        },
        "files": [
            "app/helpers.php"
        ]
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "php artisan cache:clear"
        ]
    },
    "config": {
        "sort-packages": true,
        "platform-check": false
    }
}
Como Implementar
Após modificar o composer.json, execute:

bash
composer dump-autoload
Para desenvolvimento, instale as dependências:

bash
composer install
Para produção:

bash
composer install --no-dev
Boas Práticas Adicionais
Namespaces Hierárquicos:

json
"App\\": "src/",
"App\\Core\\": "app/Core/",
"App\\Controllers\\": "app/Controllers/"
Carregar arquivos auxiliares:

json
"files": [
    "app/helpers.php"
]
Scripts úteis:

json
"scripts": {
    "post-update-cmd": [
        "@php artisan optimize"
    ]
}

_________________________________________________________________________________________________________________________

# ANÁLISE E MELHORIAS PARA A CLASSE `ROUTE`

ANALISE A CLASSE `ROUTE` E MELHORIAS:

## Classe Atual

```php
<?php

namespace app\Core;

class Route
{
    private array $url = [];

    public function __construct()
    {
        $this->processarUrl();
    }
    
    public function processarUrl(): void
    {
        echo $url = filter_input(INPUT_SERVER, 'REQUEST_URI', FILTER_SANITIZE_URL);
        $url = urldecode($url);
        $url = trim(rtrim($url, '/'));
        $url = str_ireplace(' ', '', $url);
        $url = explode('/', $url);
        $this->url = array_slice($url, 1);
        
        var_dump($url);
    }
}
```

## MELHORIAS SUGERIDAS

1. **Remover saídas de debug**:
   - Remover `echo` e `var_dump` para produção

2. **Tipagem mais rigorosa**:
   - Especificar tipo de array retornado

3. **Tratamento de erros**:
   - Verificar se a URL existe antes de processar

4. **Métodos adicionais úteis**:
   - Adicionar métodos para acessar partes da URL

5. **Padronização**:
   - Seguir PSR-12 mais estritamente

## Versão Melhorada

```php
<?php

namespace app\Core;

class Route
{
    private array $urlParts = [];
    private string $requestUri;

    public function __construct()
    {
        $this->requestUri = $this->sanitizeUrl();
        $this->processUrl();
    }
    
    private function sanitizeUrl(): string
    {
        $url = filter_input(INPUT_SERVER, 'REQUEST_URI', FILTER_SANITIZE_URL);
        if ($url === null) {
            return '/';
        }
        
        return urldecode($url);
    }
    
    private function processUrl(): void
    {
        $url = trim($this->requestUri, '/');
        $url = str_replace(' ', '', $url);
        $parts = explode('/', $url);
        $this->urlParts = array_filter($parts); // Remove elementos vazios
    }
    
    public function getUrlParts(): array
    {
        return $this->urlParts;
    }
    
    public function getFirstPart(): ?string
    {
        return $this->urlParts[0] ?? null;
    }
    
    public function getLastPart(): ?string
    {
        if (empty($this->urlParts)) {
            return null;
        }
        
        return end($this->urlParts);
    }
    
    public function getPart(int $index): ?string
    {
        return $this->urlParts[$index] ?? null;
    }
}
```

## PRINCIPAIS MELHORIAS:

1. **Separação de responsabilidades**:
   - Método `sanitizeUrl()` separado do processamento principal
   - Métodos específicos para acessar partes da URL

2. **Segurança reforçada**:
   - Tratamento para quando `REQUEST_URI` não existe
   - Uso de `array_filter` para remover partes vazias

3. **Interface mais clara**:
   - Métodos públicos bem definidos para acessar os dados
   - Tipos de retorno explícitos (incluindo nullable)

4. **Performance**:
   - Remoção de `rtrim` redundante (já que `trim` remove de ambos os lados)
   - Processamento feito apenas uma vez no construtor

5. **Testabilidade**:
   - Fica mais fácil mockar ou injetar valores para teste
   
NOTA EXPLICATIVA

### EXPLICAÇÃO SOBRE OS FILTROS USADOS NA CLASSE `ROUTE`

#### 1. **`filter_input(INPUT_SERVER, 'REQUEST_URI', FILTER_SANITIZE_URL)`**
   - **Função**:  
     Obtém a URL solicitada (`REQUEST_URI`) de forma segura a partir do array `$_SERVER` e aplica um filtro de sanitização.
   - **Filtro `FILTER_SANITIZE_URL`**:  
     Remove caracteres ilegais de URLs, como:
     - Espaços (` `) → Convertidos em `%20`
     - Caracteres especiais não permitidos em URLs (ex: `<`, `>`, `"`, `'`)
     - **O que mantém**:  
       Letras, números, `$-_.+!*'(),;/?:@&=`.
   - **Segurança**:  
     Previne ataques como XSS (Cross-Site Scripting) e injeção de código malicioso via URL.

#### 2. **`urldecode($url)`**
   - **Função**:  
     Decodifica caracteres codificados na URL (ex: `%20` volta a ser um espaço ` `).
   - **Uso típico**:  
     Permite processar URLs amigáveis corretamente (ex: `/produtos/café%20especial` → `/produtos/café especial`).

#### 3. **`trim($url, '/')`**
   - **Função**:  
     Remove barras (`/`) no **início e fim** da URL.
   - **Exemplo**:  
     `/produtos/` → `produtos`.

#### 4. **`str_replace(' ', '', $url)`**
   - **Função**:  
     Remove **todos os espaços** da URL (não apenas os codificados como `%20`).
   - **Cuidado**:  
     Pode não ser desejável em todos os casos (ex: se sua URL precisar manter espaços em parâmetros).

#### 5. **`explode('/', $url)`**
   - **Função**:  
     Divide a URL em partes usando a barra (`/`) como delimitador.
   - **Exemplo**:  
     `produtos/eletronicos/42` → `['produtos', 'eletronicos', '42']`.

#### 6. **`array_slice($url, 1)`** (na versão original)
   - **Função**:  
     Remove o primeiro elemento do array (útil se a URL começar com uma barra vazia).
   - **Exemplo**:  
     `['', 'produtos', '42']` → `['produtos', '42']`.

---

### Comparação de Abordagens:
| **Filtro/Função**       | **Versão Original**               | **Versão Melhorada**                     |
|-------------------------|-----------------------------------|------------------------------------------|
| **Sanitização**         | `FILTER_SANITIZE_URL`             | Método dedicado `sanitizeUrl()`          |
| **Tratamento de Erros** | Nenhum                           | Verifica se `$url === null`              |
| **Barras**              | `trim(rtrim($url, '/'))`         | `trim($url, '/')` (mais simples)         |
| **Partes Vazias**       | Mantém (via `array_slice`)       | Remove (via `array_filter`)              |

---

### Quando Usar Cada Filtro:
1. **Para URLs de rotas**:  
   Combine `FILTER_SANITIZE_URL` + `urldecode()` + `trim()`.
2. **Para parâmetros de query string**:  
   Use adicionalmente `FILTER_SANITIZE_STRING` ou `FILTER_SANITIZE_SPECIAL_CHARS`.

  
___________________________________________________________________________________
Core/View.php (gerada pela IA, funcionando)


<?php

namespace app\Core;

class View
{
    private const VIEWS_PATH = __DIR__ . '/../Views/';
    private const LAYOUTS_PATH = __DIR__ . '/../Views/layouts/';

    public static function render(string $view, array $data = [], ?string $layout = 'base'): void
    {
        try {
            // Processa a view
            $viewContent = self::renderView($view, $data);
            
            // Processa o layout (se existir)
            if ($layout !== null) {
                $viewContent = self::renderLayout($layout, $viewContent);
            }
            
            echo $viewContent;
            
        } catch (\RuntimeException $e) {
            http_response_code(500);
            echo "Erro ao renderizar view: " . $e->getMessage();
        }
    }

    private static function renderView(string $view, array $data): string
    {
        $viewPath = self::VIEWS_PATH . self::sanitizePath($view) . '.php';
        
        if (!file_exists($viewPath)) {
            throw new \RuntimeException("View não encontrada: {$view}");
        }
        
        extract($data, EXTR_SKIP);
        ob_start();
        include $viewPath;
        return ob_get_clean();
    }

    private static function renderLayout(string $layout, string $content): string
    {
        $layoutPath = self::LAYOUTS_PATH . self::sanitizePath($layout) . '.php';
        
        if (!file_exists($layoutPath)) {
            return $content; // Retorna sem layout se não existir
        }
        
        ob_start();
        include $layoutPath;
        $layoutContent = ob_get_clean();
        
        return str_replace('@content', $content, $layoutContent);
    }

    private static function sanitizePath(string $path): string
    {
        return ltrim(str_replace(['..', '/'], ['', DIRECTORY_SEPARATOR], $path), DIRECTORY_SEPARATOR);
    }
}

----------------------------------------------------------------------------------------------------------

Controllers

Controllers\CategoriaController.php

<?php


namespace app\Controllers;

/**
 * Description of CategoriaController
 *
 * @author Administrador
 */
class CategoriaController
{
    private function index(): void
    {
        echo 'categoria';
    }
}
_________________________________________________________________________________________________________________

Controllers\HomeController.php

<?php

namespace app\Controllers;

use app\Core\View;

/**
 * Description of HomeController
 *
 * @author Administrador
 */

class HomeController 
{
    public function index() :void
    {
        View::render('site/home', [
            'title' => 'Página Index'
        ]);
    }
}
___________________________________________________________________________________________________________________

Controllers\SobreController.php

<?php

namespace app\Controllers;

use app\Core\View;

/**
 * Description of SobreController
 *
 * @author Administrador
 */

class SobreController
{
    public function index() : void
    {
        View::render('site/sobre', [
            'title' => 'Página sobre'
        ]);  
    }
}
____________________________________________________________________________________________________________________

Core

Core\Database.php

<?php

namespace app\Core;

use PDO;
use PDOException;

/**
 * Description of Database
 *
 * @author Administrador
 */
class Database
{
    private static ?PDO $conexao = null;
    
    private function __clone(): void
    {
        
    }
    
    public static function getConexao(): PDO
    {
        if(self::$conexao === null){
            try {
               $host = getenv('DB_HOST');
               $banco = getenv('DB_NAME');
               $usuario = getenv('DB_USER');
               $senha = getenv('DB_PASS');
               $charset = 'utf8mb4';
               
               $dsn = "mysql:host=$host;dbname=$banco;charset=$charset";
               
               $options = [
               PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ,
                   
               ];
               
               self::$conexao = new PDO($dsn, $usuario, $senha, $options);
               echo 'conexao realizada com sucesso';
                
            } catch (PDOException $ex) {
                throw new PDOException("Erro ao realizar a conexão com o banco de dados ".$sex);
            }
        }
        return self::$conexao;   
    }
}
_____________________________________________________________________________________________________________________

Core\Env.php

<?php



namespace app\Core;

/**
 * Description of Env
 *
 * @author Administrador
 */
class Env
{
    public static function load(string $arquivo = '../.env'): void
    {
        if(file_exists($arquivo)){
            
            $env = parse_ini_file($arquivo);
            
            foreach ($env as $chave => $valor) {
                
                putenv("$chave=$valor");
                
                $_ENV[$chave] = $valor;
            }
            
        } else {
            throw new \RuntimeException("Arquivo .env não enccontrado em ".$arquivo);
        }
    }
}
______________________________________________________________________________________________________________________

Core\Route.php

<?php

namespace app\Core;

/**
 * Description of Route
 *
 * @author Administrador
 */

class Route
{
    private array $url = [];
    private string $nomeControlador = 'HomeController';
    private object $controlador;
    private string $namespace = 'app\\Controllers\\';
    private string $metodo = 'index';
    private array $parametros = [];

    public function __construct()
    {
        $this->processarUrl();
        $this->inicializarControlador();
        $this->executarMetodo();
    }
    
    private function  processarUrl(): void
    {
        $url = filter_input(INPUT_SERVER, 'REQUEST_URI', FILTER_SANITIZE_URL);
        $url = urldecode($url);
        $url = trim(rtrim($url, '/'));
        $url = str_ireplace(' ', '', $url);
        $url = explode('/', $url);
        $this->url = array_slice($url, 2);
    }
    
    private function inicializarControlador(): void
    {
        if(!empty($this->url[0])){
            $controlador = ucwords($this->url[0]). 'Controller';
            $controladorCompleto = $this->namespace.$controlador;
        
        if ($this->controladorExiste($controladorCompleto)){
            $this->nomeControlador = $controlador;  
            $this->url = array_values(array_slice($this->url, 1));
        } else {
            $this->paginaNaoEncontrada("O controlador '{$controlador}' não foi encontrado!");
            }
        } 
        
        $reflection = new \ReflectionClass($this->namespace.$this->nomeControlador);
        $this->controlador = $reflection->newInstance();
    }
    
    private function executarMetodo(): void
    {
        if(!empty($this->url[0]) && method_exists($this->controlador, $this->url[0])){
            $this->metodo = $this->url[0];
            $this->url = array_values(array_slice($this->url, 1));
        }
        
        $this->parametros = $this->url;
        
        $reflection = new \ReflectionMethod($this->controlador, $this->metodo);
        echo $reflection->invokeArgs($this->controlador, $this->parametros);
    }


    private function controladorExiste(string $controladorCompleto): bool
    {
        return class_exists($controladorCompleto);
    }
    
    private function paginaNaoEncontrada(string $mensagem = 'Página não encontrada'): void
    {
    http_response_code(404);
    echo $mensagem;
    exit();
    }
}
_______________________________________________________________________________________________________________________

Core\View.php

<?php

namespace app\Core;

/**
 * Description of View
 *
 * @author Administrador
 */
class View
{
    public static function render(string $view, array $dados = []): void
    {
        extract($dados);
        
        ob_start();
        
        $arquivo = '../app/Views/'.$view.'.php';
        if (file_exists($arquivo)){
            require_once $arquivo;
        } else {
            die("A view {$view} não foi encontrada!");
        }
        
        $conteudo = ob_get_clean();
        
        $base = strtok($view, '/');
        $arquivoBase = '../app/Views/'.$base.'/base.php';
        
        if (file_exists($arquivoBase)){
            require_once $arquivoBase;
        } else {
            die("O layot base não foi encontrado!");
        }
    }
}
________________________________________________________________________________________________________________________
    
Public

public\.htaccess`


RewriteEngine on

RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php [L]
_________________________________________________________________________________________________________________________

public\index.php

<?php
require __DIR__ . '../../vendor/autoload.php';
include '../app/Core/Route.php';

use app\Core\Env;
$env = Env::load();

//use app\Core\Route;

//$route = new Route();

use app\Core\Database;

$conn = Database::getConexao();
______________________________________________________________________________________________________________________

Views
Views/site

site\base.php

<html>
    <head>
        <title><?= $title ?? ''; ?></title>
        <link rel="stylesheet" href="public/assets/css/site.css"/>
        <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    </head>
    <body>
        <?php include 'topo.php'; ?>
        
        <?= $conteudo ?? ''; ?>
        
        <?php include 'rodape.php'; ?>
        
        <script src="public/assets/js/site.js"></script>
    </body>
</html>
_______________________________________________________________________________________________________________

site\home.php


___________________________________________________________________________________________________________________

site\rodape.php


____________________________________________________________________________________________________________________

site\topo.php

_____________________________________________________________________________________________________________________

site\sobre.php


____________________________________________________________________________________________________________________
